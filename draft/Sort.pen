SortNumbers = \(ns [number]) [number] {
  ...
}

SortStrings = \(ss [string]) [string] {
  ...
}

SortNumbersByFunction = \(
  ss [number],
	compare \(number, number) number,
) [number] {
  ...
}

SortStringsByFunction = \(
  ss [string],
	compare \(string, string) number,
) [string] {
  ...
}

SortAnys = \(xs [any], \(any, any) number) [any] {
  ...
}

# - generic built-in function
# - list comprehension
#   - e.g. [xs by \(x number, y number) nubmer { number - number }]
#   - map and filter too?
# - generic map types
# - do nothing
#   - O(n^2) sort

SortFoo = \(xs [foo]) [foo] {
  # Downcasting generic lists filtering them by types.
  [foo
    ...SortAnys(
      [any ...xs],
      \(x any, y any) number {
        if x = x as foo {
          if y = y as foo {
            x.age - y.age
          } else {
            0
          }
        } else {
          0
        }
      },
    ),
  ]
}
