import System'Os

type myList {
  node \() Node | none
}

type Node {
  first \() any
  rest \() Node | none
}

type FirstRest {
  first \() any
  rest myList
}

first = \(fr FirstRest) \() any {
  fr.first
}

rest = \(fr FirstRest) myList {
  fr.rest
}

firstRest = \(l myList) FirstRest | none {
  if n = l.node(); Node {
    FirstRest{
      first: n.first,
      rest: myList{node: n.rest},
    }
  } else {
    none
  }
}

emptyList = \() myList {
  myList{node: \() Node | none { none }}
}

getListLength = \(l myList) number {
  getLengthFromNode(l.node())
}

getLengthFromNode = \(n Node | none) number {
  if n = n; Node {
    1 + getLengthFromNode(n.rest())
  } else {
    0
  }
}

prependToList = \(x \() any, l myList) myList {
  myList{node: \() Node | none { prependToNode(x, l.node) }}
}

prependToNode = \(x \() any, n \() Node | none) Node {
  Node{
    first: x,
    rest: n,
  }
}

concatenateLists = \(x myList, y myList) myList {
  myList{node: concatenateNodes(x.node, y.node)}
}

concatenateNodes = \(x \() Node | none, y \() Node | none) \() Node | none {
  \() Node | none {
    if x = x(); Node {
      prependToNode(x.first, concatenateNodes(x.rest, y))
    } else {
      y()
    }
  }
}

f = \() none {
  if [x, ...xs] = [none; ...[none; none]] {
    none
  } else {
    none
  }
}

g = \(ctx Os'Context) none {
  l = _concatenateLists(_emptyList(),_prependToList(\()any{none},_emptyList()))

  if x = _firstRest(l); _FirstRest {
    if x = _first(x)(); none {
      Os'WriteFile(ctx, Os'StdOut(), "Hello!\n")
      x
    } else {
      none
    }
  } else {
    none
  }
}

main = \(ctx Os'Context) number {
  f()
  g(ctx)
  l = concatenateLists(emptyList(),prependToList(\()any{none},emptyList()))

  if x = firstRest(l); FirstRest {
    if x = first(x)(); none {
      Os'WriteFile(ctx, Os'StdOut(), "Hello!\n")
      x
    } else {
      none
    }
  } else {
    none
  }

  0
}
