import System'Os

type myList {
  node \() Node | none
}

type Node {
  first \() any
  rest \() Node | none
}

emptyList = \() myList {
  myList{node: \() Node | none { none }}
}

prependToList = \(x \() any, l myList) myList {
  myList{node: \() Node | none { prependToNode(x, l.node) }}
}

prependToNode = \(x \() any, n \() Node | none) Node {
  Node{
    first: x,
    rest: n,
  }
}

concatenateLists = \(x myList, y myList) myList {
  myList{node: concatenateNodes(x.node, y.node)}
}

concatenateNodes = \(x \() Node | none, y \() Node | none) \() Node | none {
  \() Node | none {
    if z = x(); Node {
      concatenateNodes(z.rest, y)
      none
    } else {
      none
    }
  }
}

main = \(ctx Os'Context) number {
  l = concatenateLists(prependToList(\()any{none},emptyList()),emptyList())

  if x = l.node(); Node {
    if x = x.first(); none {
      Os'WriteFile(ctx, Os'StdOut(), "Hello!\n")
      x
    } else {
      none
    }
  } else {
    none
  }

  0
}
